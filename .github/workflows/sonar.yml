name: SonarQube Scan (Docker)

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tooling
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Start SonarQube (Docker)
        run: |
          docker run -d --name sonarqube \
            --ulimit nofile=65536:65536 \
            --sysctl vm.max_map_count=262144 \
            -p 9000:9000 sonarqube:lts-community
          echo "Waiting for SonarQube Docker healthcheck (up to 10 minutes)..."
          for i in {1..120}; do \
            status=$(docker inspect -f '{{.State.Health.Status}}' sonarqube 2>/dev/null || echo "starting"); \
            echo "Health: $status"; \
            if [ "$status" = "healthy" ]; then echo "Healthy"; break; fi; \
            sleep 5; \
          done
          status=$(docker inspect -f '{{.State.Health.Status}}' sonarqube 2>/dev/null || echo "unknown")
          if [ "$status" != "healthy" ]; then
            echo "SonarQube failed to become healthy";
            docker logs sonarqube --tail 300 || true;
            exit 1;
          fi
          echo "Waiting for HTTP endpoint..."
          for i in {1..30}; do \
            if curl -fsS http://localhost:9000/api/system/health | grep -q GREEN; then echo "HTTP ready"; break; fi; \
            sleep 2; \
          done
          echo "Setting admin password..."
          curl -fsS -u admin:admin -X POST 'http://localhost:9000/api/users/change_password?login=admin&previousPassword=admin&password=adminadmin' || true
          echo "Generating token..."
          TOKEN=$(curl -fsS -u admin:adminadmin -X POST 'http://localhost:9000/api/user_tokens/generate?name=ci-token' | jq -r .token)
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then echo "Failed to create token"; exit 1; fi
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "SONAR_HOST_URL=http://localhost:9000" >> $GITHUB_ENV

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install
        run: npm ci || npm i

      - name: Build (if any)
        run: echo "No build step"

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Quality Gate (wait)
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: Stop SonarQube
        if: always()
        run: |
          docker logs sonarqube --tail 200 || true
          docker rm -f sonarqube || true


